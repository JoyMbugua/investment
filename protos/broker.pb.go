// Code generated by protoc-gen-go.
// source: protos/broker.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	protos/broker.proto

It has these top-level messages:
	Empty
	AuthToken
	InstrumentID
	InstrumentIDList
	Instrument
	InstrumentList
	AccountID
	Account
	AccountList
	Quote
	QuoteList
	OrderID
	Order
	OrderList
	OrderCreation
	OrderChange
	OrderCreationResponse
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderSide int32

const (
	OrderSide_BUY  OrderSide = 0
	OrderSide_SELL OrderSide = 1
)

var OrderSide_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}
var OrderSide_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}
func (OrderSide) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OrderType int32

const (
	OrderType_LIMIT             OrderType = 0
	OrderType_STOP              OrderType = 1
	OrderType_MARKET_IF_TOUCHED OrderType = 2
	OrderType_MARKET            OrderType = 3
)

var OrderType_name = map[int32]string{
	0: "LIMIT",
	1: "STOP",
	2: "MARKET_IF_TOUCHED",
	3: "MARKET",
}
var OrderType_value = map[string]int32{
	"LIMIT":             0,
	"STOP":              1,
	"MARKET_IF_TOUCHED": 2,
	"MARKET":            3,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type InstrumentID_ID int32

const (
	InstrumentID_EURUSD InstrumentID_ID = 0
	InstrumentID_GBPUSD InstrumentID_ID = 1
)

var InstrumentID_ID_name = map[int32]string{
	0: "EURUSD",
	1: "GBPUSD",
}
var InstrumentID_ID_value = map[string]int32{
	"EURUSD": 0,
	"GBPUSD": 1,
}

func (x InstrumentID_ID) String() string {
	return proto.EnumName(InstrumentID_ID_name, int32(x))
}
func (InstrumentID_ID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AuthToken struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *AuthToken) Reset()                    { *m = AuthToken{} }
func (m *AuthToken) String() string            { return proto.CompactTextString(m) }
func (*AuthToken) ProtoMessage()               {}
func (*AuthToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type InstrumentID struct {
	Id InstrumentID_ID `protobuf:"varint,1,opt,name=id,enum=protos.InstrumentID_ID" json:"id,omitempty"`
}

func (m *InstrumentID) Reset()                    { *m = InstrumentID{} }
func (m *InstrumentID) String() string            { return proto.CompactTextString(m) }
func (*InstrumentID) ProtoMessage()               {}
func (*InstrumentID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InstrumentIDList struct {
	Value []*InstrumentID `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *InstrumentIDList) Reset()                    { *m = InstrumentIDList{} }
func (m *InstrumentIDList) String() string            { return proto.CompactTextString(m) }
func (*InstrumentIDList) ProtoMessage()               {}
func (*InstrumentIDList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InstrumentIDList) GetValue() []*InstrumentID {
	if m != nil {
		return m.Value
	}
	return nil
}

type Instrument struct {
	Name          InstrumentID_ID `protobuf:"varint,1,opt,name=name,enum=protos.InstrumentID_ID" json:"name,omitempty"`
	DisplayName   string          `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Pip           string          `protobuf:"bytes,3,opt,name=pip" json:"pip,omitempty"`
	MaxTradeUnits int32           `protobuf:"varint,4,opt,name=max_trade_units,json=maxTradeUnits" json:"max_trade_units,omitempty"`
}

func (m *Instrument) Reset()                    { *m = Instrument{} }
func (m *Instrument) String() string            { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()               {}
func (*Instrument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type InstrumentList struct {
	Value []*Instrument `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *InstrumentList) Reset()                    { *m = InstrumentList{} }
func (m *InstrumentList) String() string            { return proto.CompactTextString(m) }
func (*InstrumentList) ProtoMessage()               {}
func (*InstrumentList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InstrumentList) GetValue() []*Instrument {
	if m != nil {
		return m.Value
	}
	return nil
}

type AccountID struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *AccountID) Reset()                    { *m = AccountID{} }
func (m *AccountID) String() string            { return proto.CompactTextString(m) }
func (*AccountID) ProtoMessage()               {}
func (*AccountID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Account struct {
	Id           string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Currency     string  `protobuf:"bytes,3,opt,name=currency" json:"currency,omitempty"`
	MarginRate   float64 `protobuf:"fixed64,4,opt,name=margin_rate,json=marginRate" json:"margin_rate,omitempty"`
	Balance      float64 `protobuf:"fixed64,5,opt,name=balance" json:"balance,omitempty"`
	UnrealizedPl float64 `protobuf:"fixed64,6,opt,name=unrealized_pl,json=unrealizedPl" json:"unrealized_pl,omitempty"`
	RealizedPl   float64 `protobuf:"fixed64,7,opt,name=realized_pl,json=realizedPl" json:"realized_pl,omitempty"`
	MarginUsed   float64 `protobuf:"fixed64,8,opt,name=margin_used,json=marginUsed" json:"margin_used,omitempty"`
	MarginAvail  float64 `protobuf:"fixed64,9,opt,name=margin_avail,json=marginAvail" json:"margin_avail,omitempty"`
	OpenTrades   float64 `protobuf:"fixed64,10,opt,name=open_trades,json=openTrades" json:"open_trades,omitempty"`
	OpenOrders   float64 `protobuf:"fixed64,11,opt,name=open_orders,json=openOrders" json:"open_orders,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type AccountList struct {
	Value []*Account `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *AccountList) Reset()                    { *m = AccountList{} }
func (m *AccountList) String() string            { return proto.CompactTextString(m) }
func (*AccountList) ProtoMessage()               {}
func (*AccountList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AccountList) GetValue() []*Account {
	if m != nil {
		return m.Value
	}
	return nil
}

type Quote struct {
	Id     InstrumentID_ID `protobuf:"varint,1,opt,name=id,enum=protos.InstrumentID_ID" json:"id,omitempty"`
	Time   string          `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Bid    float64         `protobuf:"fixed64,3,opt,name=bid" json:"bid,omitempty"`
	Ask    float64         `protobuf:"fixed64,4,opt,name=ask" json:"ask,omitempty"`
	Status string          `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
}

func (m *Quote) Reset()                    { *m = Quote{} }
func (m *Quote) String() string            { return proto.CompactTextString(m) }
func (*Quote) ProtoMessage()               {}
func (*Quote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type QuoteList struct {
	Value []*Quote `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *QuoteList) Reset()                    { *m = QuoteList{} }
func (m *QuoteList) String() string            { return proto.CompactTextString(m) }
func (*QuoteList) ProtoMessage()               {}
func (*QuoteList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QuoteList) GetValue() []*Quote {
	if m != nil {
		return m.Value
	}
	return nil
}

type OrderID struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *OrderID) Reset()                    { *m = OrderID{} }
func (m *OrderID) String() string            { return proto.CompactTextString(m) }
func (*OrderID) ProtoMessage()               {}
func (*OrderID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Order struct {
	Id           string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Instrument   InstrumentID_ID `protobuf:"varint,2,opt,name=instrument,enum=protos.InstrumentID_ID" json:"instrument,omitempty"`
	Units        int32           `protobuf:"varint,3,opt,name=units" json:"units,omitempty"`
	Side         OrderSide       `protobuf:"varint,4,opt,name=side,enum=protos.OrderSide" json:"side,omitempty"`
	Type         OrderType       `protobuf:"varint,5,opt,name=type,enum=protos.OrderType" json:"type,omitempty"`
	Time         string          `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	Price        float64         `protobuf:"fixed64,7,opt,name=price" json:"price,omitempty"`
	TakeProfit   float64         `protobuf:"fixed64,8,opt,name=take_profit,json=takeProfit" json:"take_profit,omitempty"`
	StopLoss     float64         `protobuf:"fixed64,9,opt,name=stop_loss,json=stopLoss" json:"stop_loss,omitempty"`
	Expiry       string          `protobuf:"bytes,10,opt,name=expiry" json:"expiry,omitempty"`
	UpperBound   float64         `protobuf:"fixed64,11,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	LowerBound   float64         `protobuf:"fixed64,12,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	TrailingStop float64         `protobuf:"fixed64,13,opt,name=trailing_stop,json=trailingStop" json:"trailing_stop,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type OrderList struct {
	Value []*Order `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *OrderList) Reset()                    { *m = OrderList{} }
func (m *OrderList) String() string            { return proto.CompactTextString(m) }
func (*OrderList) ProtoMessage()               {}
func (*OrderList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OrderList) GetValue() []*Order {
	if m != nil {
		return m.Value
	}
	return nil
}

type OrderCreation struct {
	Instrument   InstrumentID_ID `protobuf:"varint,1,opt,name=instrument,enum=protos.InstrumentID_ID" json:"instrument,omitempty"`
	Units        int32           `protobuf:"varint,2,opt,name=units" json:"units,omitempty"`
	Side         OrderSide       `protobuf:"varint,3,opt,name=side,enum=protos.OrderSide" json:"side,omitempty"`
	Type         OrderType       `protobuf:"varint,4,opt,name=type,enum=protos.OrderType" json:"type,omitempty"`
	Expiry       string          `protobuf:"bytes,5,opt,name=expiry" json:"expiry,omitempty"`
	Price        float64         `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	TakeProfit   float64         `protobuf:"fixed64,7,opt,name=take_profit,json=takeProfit" json:"take_profit,omitempty"`
	StopLoss     float64         `protobuf:"fixed64,8,opt,name=stop_loss,json=stopLoss" json:"stop_loss,omitempty"`
	UpperBound   float64         `protobuf:"fixed64,9,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	LowerBound   float64         `protobuf:"fixed64,10,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	TrailingStop float64         `protobuf:"fixed64,11,opt,name=trailing_stop,json=trailingStop" json:"trailing_stop,omitempty"`
	AccountId    *AccountID      `protobuf:"bytes,12,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *OrderCreation) Reset()                    { *m = OrderCreation{} }
func (m *OrderCreation) String() string            { return proto.CompactTextString(m) }
func (*OrderCreation) ProtoMessage()               {}
func (*OrderCreation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *OrderCreation) GetAccountId() *AccountID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

type OrderChange struct {
	Units        int32      `protobuf:"varint,1,opt,name=units" json:"units,omitempty"`
	Price        float64    `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	Expiry       string     `protobuf:"bytes,3,opt,name=expiry" json:"expiry,omitempty"`
	TakeProfit   float64    `protobuf:"fixed64,4,opt,name=take_profit,json=takeProfit" json:"take_profit,omitempty"`
	StopLoss     float64    `protobuf:"fixed64,5,opt,name=stop_loss,json=stopLoss" json:"stop_loss,omitempty"`
	UpperBound   float64    `protobuf:"fixed64,6,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	LowerBound   float64    `protobuf:"fixed64,7,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	TrailingStop float64    `protobuf:"fixed64,8,opt,name=trailing_stop,json=trailingStop" json:"trailing_stop,omitempty"`
	AccountId    *AccountID `protobuf:"bytes,9,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OrderId      *OrderID   `protobuf:"bytes,10,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
}

func (m *OrderChange) Reset()                    { *m = OrderChange{} }
func (m *OrderChange) String() string            { return proto.CompactTextString(m) }
func (*OrderChange) ProtoMessage()               {}
func (*OrderChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *OrderChange) GetAccountId() *AccountID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *OrderChange) GetOrderId() *OrderID {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type OrderCreationResponse struct {
	Time  string `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Order *Order `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
}

func (m *OrderCreationResponse) Reset()                    { *m = OrderCreationResponse{} }
func (m *OrderCreationResponse) String() string            { return proto.CompactTextString(m) }
func (*OrderCreationResponse) ProtoMessage()               {}
func (*OrderCreationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OrderCreationResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "protos.Empty")
	proto.RegisterType((*AuthToken)(nil), "protos.AuthToken")
	proto.RegisterType((*InstrumentID)(nil), "protos.InstrumentID")
	proto.RegisterType((*InstrumentIDList)(nil), "protos.InstrumentIDList")
	proto.RegisterType((*Instrument)(nil), "protos.Instrument")
	proto.RegisterType((*InstrumentList)(nil), "protos.InstrumentList")
	proto.RegisterType((*AccountID)(nil), "protos.AccountID")
	proto.RegisterType((*Account)(nil), "protos.Account")
	proto.RegisterType((*AccountList)(nil), "protos.AccountList")
	proto.RegisterType((*Quote)(nil), "protos.Quote")
	proto.RegisterType((*QuoteList)(nil), "protos.QuoteList")
	proto.RegisterType((*OrderID)(nil), "protos.OrderID")
	proto.RegisterType((*Order)(nil), "protos.Order")
	proto.RegisterType((*OrderList)(nil), "protos.OrderList")
	proto.RegisterType((*OrderCreation)(nil), "protos.OrderCreation")
	proto.RegisterType((*OrderChange)(nil), "protos.OrderChange")
	proto.RegisterType((*OrderCreationResponse)(nil), "protos.OrderCreationResponse")
	proto.RegisterEnum("protos.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("protos.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("protos.InstrumentID_ID", InstrumentID_ID_name, InstrumentID_ID_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Broker service

type BrokerClient interface {
	GetInstrumentList(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*InstrumentList, error)
	GetPrices(ctx context.Context, in *InstrumentIDList, opts ...grpc.CallOption) (*QuoteList, error)
	StreamQuotes(ctx context.Context, in *InstrumentID, opts ...grpc.CallOption) (Broker_StreamQuotesClient, error)
	GetAccounts(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*AccountList, error)
	GetOrders(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*OrderList, error)
	CreateOrder(ctx context.Context, in *OrderCreation, opts ...grpc.CallOption) (*OrderCreationResponse, error)
	ChangeOrder(ctx context.Context, in *OrderChange, opts ...grpc.CallOption) (*Order, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) GetInstrumentList(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*InstrumentList, error) {
	out := new(InstrumentList)
	err := grpc.Invoke(ctx, "/protos.Broker/GetInstrumentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) GetPrices(ctx context.Context, in *InstrumentIDList, opts ...grpc.CallOption) (*QuoteList, error) {
	out := new(QuoteList)
	err := grpc.Invoke(ctx, "/protos.Broker/GetPrices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) StreamQuotes(ctx context.Context, in *InstrumentID, opts ...grpc.CallOption) (Broker_StreamQuotesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[0], c.cc, "/protos.Broker/StreamQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerStreamQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Broker_StreamQuotesClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type brokerStreamQuotesClient struct {
	grpc.ClientStream
}

func (x *brokerStreamQuotesClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) GetAccounts(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := grpc.Invoke(ctx, "/protos.Broker/GetAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) GetOrders(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := grpc.Invoke(ctx, "/protos.Broker/GetOrders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) CreateOrder(ctx context.Context, in *OrderCreation, opts ...grpc.CallOption) (*OrderCreationResponse, error) {
	out := new(OrderCreationResponse)
	err := grpc.Invoke(ctx, "/protos.Broker/CreateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) ChangeOrder(ctx context.Context, in *OrderChange, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/protos.Broker/ChangeOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerServer interface {
	GetInstrumentList(context.Context, *AuthToken) (*InstrumentList, error)
	GetPrices(context.Context, *InstrumentIDList) (*QuoteList, error)
	StreamQuotes(*InstrumentID, Broker_StreamQuotesServer) error
	GetAccounts(context.Context, *AuthToken) (*AccountList, error)
	GetOrders(context.Context, *AccountID) (*OrderList, error)
	CreateOrder(context.Context, *OrderCreation) (*OrderCreationResponse, error)
	ChangeOrder(context.Context, *OrderChange) (*Order, error)
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_GetInstrumentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetInstrumentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Broker/GetInstrumentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetInstrumentList(ctx, req.(*AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_GetPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Broker/GetPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetPrices(ctx, req.(*InstrumentIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_StreamQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstrumentID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServer).StreamQuotes(m, &brokerStreamQuotesServer{stream})
}

type Broker_StreamQuotesServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type brokerStreamQuotesServer struct {
	grpc.ServerStream
}

func (x *brokerStreamQuotesServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

func _Broker_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Broker/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetAccounts(ctx, req.(*AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Broker/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).GetOrders(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Broker/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).CreateOrder(ctx, req.(*OrderCreation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_ChangeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).ChangeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Broker/ChangeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).ChangeOrder(ctx, req.(*OrderChange))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstrumentList",
			Handler:    _Broker_GetInstrumentList_Handler,
		},
		{
			MethodName: "GetPrices",
			Handler:    _Broker_GetPrices_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Broker_GetAccounts_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Broker_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Broker_CreateOrder_Handler,
		},
		{
			MethodName: "ChangeOrder",
			Handler:    _Broker_ChangeOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQuotes",
			Handler:       _Broker_StreamQuotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protos/broker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x5d, 0x6f, 0xe3, 0x44,
	0x17, 0xae, 0xe3, 0x7c, 0xf9, 0xb8, 0x1f, 0xe9, 0x74, 0xbb, 0xaf, 0x95, 0x17, 0x58, 0xd6, 0x2b,
	0xa0, 0x2a, 0x52, 0xa9, 0xba, 0x48, 0x2b, 0xed, 0x05, 0xa2, 0x1f, 0x61, 0x89, 0xe8, 0xd2, 0xe0,
	0x26, 0x17, 0x5c, 0x59, 0x6e, 0x32, 0x74, 0xad, 0x3a, 0xb6, 0xe5, 0xb1, 0x97, 0x0d, 0x57, 0xfc,
	0x0a, 0x6e, 0xf8, 0x05, 0x5c, 0xf2, 0x4f, 0xb8, 0xe0, 0x07, 0x31, 0x73, 0x66, 0x1c, 0xdb, 0x49,
	0x48, 0x56, 0xdc, 0x79, 0x9e, 0x79, 0x66, 0xe6, 0x9c, 0xe7, 0x39, 0x67, 0x3c, 0x70, 0x10, 0x27,
	0x51, 0x1a, 0xb1, 0x2f, 0xee, 0x92, 0xe8, 0x81, 0x26, 0x27, 0x38, 0x22, 0x4d, 0x09, 0xda, 0x2d,
	0x68, 0xf4, 0xa6, 0x71, 0x3a, 0xb3, 0x9f, 0x82, 0x71, 0x9e, 0xa5, 0x6f, 0x86, 0x9c, 0x13, 0x92,
	0x47, 0xd0, 0x78, 0xeb, 0x05, 0x19, 0xb5, 0xb4, 0x8f, 0xb5, 0x23, 0xc3, 0x91, 0x03, 0x7b, 0x04,
	0xdb, 0xfd, 0x90, 0xa5, 0x49, 0x36, 0xa5, 0x61, 0xda, 0xbf, 0x22, 0x9f, 0x41, 0xcd, 0x9f, 0x20,
	0x65, 0xf7, 0xec, 0x7f, 0x72, 0x5f, 0x76, 0x52, 0x66, 0x9c, 0xf4, 0xaf, 0x1c, 0x4e, 0xb1, 0x3f,
	0x80, 0x1a, 0xa7, 0x03, 0x34, 0x7b, 0x23, 0x67, 0x74, 0x7b, 0xd5, 0xd9, 0x12, 0xdf, 0xaf, 0x2e,
	0x06, 0xe2, 0x5b, 0xb3, 0xbf, 0x82, 0x4e, 0x79, 0xd1, 0xb5, 0xcf, 0x52, 0x72, 0x5c, 0x04, 0xa0,
	0x1f, 0x99, 0x67, 0x8f, 0x56, 0xed, 0x9e, 0x87, 0xf5, 0x9b, 0x06, 0x50, 0xe0, 0xe4, 0x73, 0xa8,
	0x87, 0xde, 0x94, 0x6e, 0x8a, 0x0b, 0x49, 0xe4, 0x29, 0x6c, 0x4f, 0x7c, 0x16, 0x07, 0xde, 0xcc,
	0xc5, 0x45, 0x35, 0xcc, 0xd7, 0x54, 0xd8, 0xf7, 0x82, 0xd2, 0x01, 0x3d, 0xf6, 0x63, 0x4b, 0xc7,
	0x19, 0xf1, 0x49, 0x3e, 0x85, 0xbd, 0xa9, 0xf7, 0xce, 0x4d, 0x13, 0x6f, 0x42, 0xdd, 0x2c, 0xf4,
	0x53, 0x66, 0xd5, 0xf9, 0x6c, 0xc3, 0xd9, 0xe1, 0xf0, 0x50, 0xa0, 0x23, 0x01, 0xda, 0x2f, 0x61,
	0xb7, 0x38, 0x15, 0xd3, 0x3a, 0xaa, 0xa6, 0x45, 0x96, 0x83, 0xcb, 0x93, 0x12, 0x76, 0x8c, 0xc7,
	0x51, 0x86, 0x42, 0xaf, 0xb6, 0xe3, 0xaf, 0x1a, 0xb4, 0x14, 0x87, 0xec, 0xce, 0xad, 0x30, 0x84,
	0xe2, 0x84, 0x28, 0x11, 0x64, 0x3e, 0x32, 0xd7, 0x2e, 0xb4, 0xc7, 0x59, 0x92, 0xd0, 0x70, 0x3c,
	0x53, 0xd9, 0xcc, 0xc7, 0xe4, 0x09, 0x98, 0x53, 0x2f, 0xb9, 0xf7, 0x43, 0x37, 0xf1, 0x52, 0x8a,
	0xe9, 0x68, 0x0e, 0x48, 0xc8, 0xe1, 0x08, 0xb1, 0xa0, 0x75, 0xe7, 0x05, 0x5e, 0x38, 0xa6, 0x56,
	0x03, 0x27, 0xf3, 0x21, 0x79, 0x06, 0x3b, 0x59, 0x98, 0x50, 0x2f, 0xf0, 0x7f, 0xa1, 0x13, 0x37,
	0x0e, 0xac, 0x26, 0xce, 0x6f, 0x17, 0xe0, 0x20, 0x10, 0xfb, 0x97, 0x29, 0x2d, 0xb9, 0x7f, 0x95,
	0xa0, 0x02, 0xc8, 0x18, 0x9d, 0x58, 0xed, 0x72, 0x00, 0x23, 0x8e, 0x08, 0xa7, 0x14, 0xc1, 0x7b,
	0xeb, 0xf9, 0x81, 0x65, 0x20, 0x43, 0x2d, 0x3a, 0x17, 0x90, 0xd8, 0x23, 0x8a, 0x69, 0x28, 0x8d,
	0x61, 0x16, 0xc8, 0x3d, 0x04, 0x84, 0xa6, 0xb0, 0x39, 0x21, 0x4a, 0x26, 0x34, 0x61, 0x96, 0x59,
	0x10, 0x6e, 0x10, 0xb1, 0xbf, 0x04, 0x53, 0x29, 0x8a, 0x76, 0x7d, 0x52, 0xb5, 0x6b, 0x2f, 0xb7,
	0x4b, 0x71, 0x72, 0x23, 0x7e, 0xd5, 0xa0, 0xf1, 0x43, 0x16, 0x71, 0x95, 0xde, 0xb7, 0x23, 0x84,
	0x3f, 0xa9, 0x5f, 0xf8, 0x23, 0xbe, 0x45, 0xa1, 0xdd, 0xf1, 0xd5, 0x3a, 0x46, 0x25, 0x3e, 0x05,
	0xe2, 0xb1, 0x07, 0xe5, 0x86, 0xf8, 0x24, 0x8f, 0xa1, 0xc9, 0x52, 0x2f, 0xcd, 0x18, 0xba, 0x60,
	0x38, 0x6a, 0x64, 0x9f, 0x82, 0x81, 0x11, 0x60, 0xd8, 0xcf, 0xaa, 0x61, 0xef, 0xe4, 0x81, 0x20,
	0x23, 0x0f, 0xfa, 0x09, 0xb4, 0x30, 0xe9, 0x7f, 0x2d, 0xaf, 0xdf, 0x75, 0x68, 0x20, 0x63, 0xa9,
	0xb8, 0x5e, 0x00, 0xf8, 0xf3, 0x9c, 0x30, 0x85, 0x35, 0xd9, 0x96, 0xa8, 0xe2, 0x20, 0xd9, 0x2e,
	0x3a, 0xb6, 0x8b, 0x1c, 0x70, 0x95, 0xeb, 0xcc, 0x9f, 0xc8, 0xa2, 0xdb, 0x3d, 0xdb, 0xcf, 0x37,
	0xc2, 0xb3, 0x6f, 0xf9, 0x84, 0x83, 0xd3, 0x82, 0x96, 0xce, 0x62, 0x59, 0x7e, 0x8b, 0xb4, 0x21,
	0x9f, 0x70, 0x70, 0x7a, 0xae, 0x6c, 0xb3, 0xa4, 0x2c, 0x3f, 0x37, 0x4e, 0x7c, 0x5e, 0xba, 0xb2,
	0xee, 0xe4, 0x40, 0x54, 0x43, 0xea, 0x3d, 0x50, 0x97, 0x6f, 0xf4, 0x93, 0x9f, 0xe6, 0x25, 0x27,
	0xa0, 0x01, 0x22, 0xe4, 0xff, 0x60, 0xb0, 0x34, 0x8a, 0xdd, 0x20, 0x62, 0x4c, 0xd5, 0x5b, 0x5b,
	0x00, 0xd7, 0x7c, 0x2c, 0x9c, 0xa0, 0xef, 0x62, 0x3f, 0x99, 0x61, 0x9d, 0x71, 0x27, 0xe4, 0x48,
	0xec, 0x9a, 0xc5, 0x31, 0x4d, 0xdc, 0x3b, 0x5e, 0x22, 0x93, 0xbc, 0xc6, 0x10, 0xba, 0x10, 0x88,
	0x20, 0x04, 0xd1, 0xcf, 0x73, 0xc2, 0xb6, 0x24, 0x20, 0x24, 0x09, 0xbc, 0xa1, 0x78, 0x05, 0xfb,
	0x81, 0x1f, 0xde, 0xbb, 0xe2, 0x38, 0x6b, 0x47, 0x36, 0x54, 0x0e, 0xde, 0x72, 0x4c, 0x18, 0x8e,
	0x99, 0xaf, 0x35, 0x1c, 0x19, 0xb9, 0x9f, 0x7f, 0xea, 0xb0, 0x83, 0xc0, 0x25, 0x6f, 0xbb, 0xd4,
	0x8f, 0xc2, 0x05, 0x1f, 0xb5, 0xff, 0xe0, 0x63, 0x6d, 0x95, 0x8f, 0xfa, 0xfb, 0xf9, 0x58, 0x5f,
	0xef, 0x63, 0xa1, 0x6f, 0xa3, 0xa2, 0xef, 0xdc, 0xcb, 0xe6, 0x1a, 0x2f, 0x5b, 0xeb, 0xbd, 0x6c,
	0x2f, 0x78, 0xb9, 0xe0, 0x99, 0xb1, 0xc9, 0x33, 0xd8, 0xec, 0x99, 0xb9, 0xec, 0x19, 0x39, 0x05,
	0xf0, 0xe4, 0xcd, 0xe1, 0xfa, 0xd2, 0x78, 0xb3, 0xc8, 0x7f, 0x7e, 0xdb, 0x3b, 0x86, 0x22, 0xf5,
	0x27, 0xf6, 0xdf, 0x35, 0x30, 0xa5, 0x67, 0x6f, 0xbc, 0xf0, 0x9e, 0x16, 0xc2, 0x6b, 0x65, 0xe1,
	0xe7, 0x92, 0xd4, 0xca, 0x92, 0x14, 0x02, 0xea, 0x8b, 0x05, 0x5a, 0x96, 0xaa, 0xbe, 0x5e, 0xaa,
	0xc6, 0x7a, 0xa9, 0x9a, 0x9b, 0xa4, 0x6a, 0x6d, 0x96, 0xaa, 0xbd, 0x51, 0x2a, 0x63, 0xb3, 0x54,
	0xfc, 0xc5, 0xd0, 0xc6, 0x6b, 0x5d, 0xf0, 0x01, 0xf9, 0x7b, 0x95, 0xd2, 0xe2, 0xec, 0x16, 0x12,
	0xb8, 0xac, 0x03, 0x38, 0xac, 0x74, 0x82, 0x43, 0x59, 0x1c, 0x85, 0xac, 0xb8, 0x3c, 0xb4, 0xd2,
	0xe5, 0xc1, 0x9b, 0x0b, 0xd7, 0xa1, 0xba, 0xcb, 0xcd, 0x85, 0x73, 0xc7, 0x1f, 0xa9, 0x76, 0x14,
	0x75, 0x4e, 0x5a, 0xa0, 0x5f, 0x8c, 0x7e, 0xe4, 0xaf, 0x9c, 0x36, 0xd4, 0x6f, 0x7b, 0xd7, 0xd7,
	0x1d, 0xed, 0xf8, 0x52, 0xcd, 0x8b, 0x02, 0x27, 0x06, 0x34, 0xae, 0xfb, 0xaf, 0xfb, 0x43, 0xc5,
	0x18, 0xde, 0x0c, 0x3a, 0x1a, 0x39, 0x84, 0xfd, 0xd7, 0xe7, 0xce, 0x77, 0xbd, 0xa1, 0xdb, 0xff,
	0xc6, 0x1d, 0xde, 0x8c, 0x2e, 0xbf, 0xed, 0x5d, 0x75, 0x6a, 0xe2, 0xa1, 0x24, 0xe1, 0x8e, 0x7e,
	0xf6, 0x87, 0x0e, 0xcd, 0x0b, 0x7c, 0xc4, 0x91, 0xaf, 0x61, 0xff, 0x15, 0x4d, 0x17, 0x5e, 0x17,
	0x85, 0x40, 0xf9, 0x43, 0xae, 0xfb, 0x78, 0xb9, 0x9d, 0x05, 0xd5, 0xde, 0x22, 0x2f, 0xc1, 0xe0,
	0x3b, 0x0c, 0x44, 0xa9, 0x30, 0x62, 0xad, 0xea, 0x7a, 0x41, 0xec, 0xee, 0x57, 0x7e, 0x1e, 0x6a,
	0xed, 0x0b, 0xd8, 0xbe, 0x4d, 0xb9, 0x76, 0x53, 0x04, 0x79, 0x01, 0xae, 0x5a, 0xde, 0xad, 0xfe,
	0x77, 0xec, 0xad, 0x53, 0x8d, 0x2f, 0x34, 0xf9, 0xa1, 0xca, 0x3f, 0xb6, 0x2a, 0xe0, 0x83, 0x05,
	0x93, 0xd5, 0x89, 0xcf, 0x31, 0x5a, 0xf9, 0x97, 0x26, 0xcb, 0x85, 0xd0, 0xad, 0x5e, 0x23, 0x6a,
	0x51, 0x0f, 0x4c, 0x74, 0x98, 0xca, 0xdf, 0xd8, 0x61, 0x85, 0x93, 0x7b, 0xdf, 0xfd, 0x70, 0x25,
	0x9c, 0x97, 0x04, 0x9e, 0x6d, 0xca, 0xf6, 0x93, 0xdb, 0x1c, 0x54, 0xf9, 0x38, 0xd3, 0xad, 0x56,
	0x85, 0xbd, 0x75, 0x27, 0xdf, 0xd7, 0xcf, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x74, 0x34, 0x98,
	0xf8, 0x7d, 0x0b, 0x00, 0x00,
}

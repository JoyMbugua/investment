syntax = "proto3";

package protos;

service Broker {
    rpc GetInstrumentList(Empty) returns (InstrumentList) {}

    rpc GetPrices(InstrumentIDList) returns (QuoteList) {}

    // TODO http://developer.oanda.com/rest-live/rates/#retrieveInstrumentHistory

    rpc StreamQuotes(InstrumentID) returns (stream Quote) {}

    rpc GetAccounts(Empty) returns (AccountList) {}

    rpc GetOrders(AccountID) returns (OrderList) {}

    rpc CreateOrder(OrderCreation) returns (OrderCreationResponse) {}

    rpc ChangeOrder(OrderChange) returns (Order) {}

    // TODO http://developer.oanda.com/rest-live/orders/#closeOrder
}

message Empty {
}

message AuthToken {
    string value = 1;
}

message InstrumentID {
    string value = 1;
}

message InstrumentIDList {
    repeated InstrumentID value = 1;
}

message Instrument {
    string name = 1;
    string display_name = 2;
    string pip = 3;
    int32 max_trade_units = 4;
}

message InstrumentList {
    repeated Instrument value = 1;
}

message AccountID {
    string value = 1;
}

message Account {
    string id = 1;
    string name = 2;
    string currency = 3;
    double margin_rate = 4;
    double balance = 5;
    double unrealized_pl = 6;
    double realized_pl = 7;
    double margin_used = 8;
    double margin_avail = 9;
    double open_trades = 10;
    double open_orders = 11;
}

message AccountList {
    repeated Account value = 1;
}

message Quote {
    string name = 1;
    string time = 2;
    double bid = 3;
    double ask = 4;
    string status = 5;
}

message QuoteList {
    repeated Quote value = 1;
}

enum OrderType {
    LIMIT = 0;
    STOP = 1;
    MARKET_IF_TOUCHED = 2;
    MARKET = 3;
}

message OrderID {
    string value = 1;
}

message Order {
    string id = 1;
    string instrument = 2;
    int32 units = 3;
    string side = 4;
    OrderType type = 5; //The type of the order ‘limit’, ‘stop’, ‘marketIfTouched’ or ‘market’
    string time = 6;
    double price = 7;
    double take_profit = 8;
    double stop_loss = 9;
    string expiry = 10;
    double upper_bound = 11;
    double lower_bound = 12;
    double trailing_stop = 13;
}

message OrderList {
    repeated Order value = 1;
}

message OrderCreation {
    string instrument = 1;
    int32 units = 2;
    string side = 3;
    OrderType type = 4;
    string expiry = 5;
    double price = 6;
    double take_profit = 7;
    double stop_loss = 8;
    double upper_bound = 9;
    double lower_bound = 10;
    double trailing_stop = 11;
    AccountID account_id = 12;
}

message OrderChange {
    int32 units = 1;
    double price = 2;
    string expiry = 3;
    double take_profit = 4;
    double stop_loss = 5;
    double upper_bound = 6;
    double lower_bound = 7;
    double trailing_stop = 8;
    AccountID account_id = 9;
    OrderID order_id = 10;
}

message OrderCreationResponse {
    string instrument = 1;
    string time = 2;
    Order order = 3;
}

